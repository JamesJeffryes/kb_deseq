# -*- coding: utf-8 -*-
#BEGIN_HEADER
#END_HEADER


class kb_deseq:
    '''
    Module Name:
    kb_deseq

    Module Description:
    A KBase module: kb_deseq
    '''

    ######## WARNING FOR GEVENT USERS ####### noqa
    # Since asynchronous IO can lead to methods - even the same method -
    # interrupting each other, you must be *very* careful when using global
    # state. A method could easily clobber the state set by another while
    # the latter method is running.
    ######################################### noqa
    VERSION = "0.0.1"
    GIT_URL = "https://github.com/Tianhao-Gu/kb_deseq.git"
    GIT_COMMIT_HASH = "df3424743710b93fa6a81f0ac617454d19744929"

    #BEGIN_CLASS_HEADER
    #END_CLASS_HEADER

    # config contains contents of config file in a hash or None if it couldn't
    # be found
    def __init__(self, config):
        #BEGIN_CONSTRUCTOR
        #END_CONSTRUCTOR
        pass


    def run_deseq2(self, ctx, params):
        """
        run_deseq2: run DESeq2 app
        ref: https://www.bioconductor.org/packages/release/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
        :param params: instance of type "DESeqInput" (required params:
           expressionset_ref: ExpressionSet object reference
           expression_set_name: ExpressionSet object name and output file
           header filtered_expr_matrix: name of output object filtered
           expression matrix workspace_name: the name of the workspace it
           gets saved to fold_scale_type: one of ["linear", "log2+1",
           "log10+1"] alpha_cutoff: q value cutoff) -> structure: parameter
           "expressionset_ref" of type "obj_ref" (An X/Y/Z style reference),
           parameter "diff_expression_obj_name" of String, parameter
           "filtered_expr_matrix" of String, parameter "workspace_name" of
           String, parameter "num_threads" of Long, parameter "expr_ids_list"
           of type "ExperimentGroupIDsList" -> structure: parameter
           "group_name1" of String, parameter "expr_ids1" of list of String,
           parameter "group_name2" of String, parameter "expr_ids2" of list
           of String, parameter "fold_scale_type" of String, parameter
           "alpha_cutoff" of Double, parameter "fold_change_cutoff" of
           Double, parameter "maximum_num_genes" of Long
        :returns: instance of type "DESeqResult" (result_directory: folder
           path that holds all files generated by run_deseq2
           expression_obj_ref: generated Expression/ExpressionSet object
           reference report_name: report name generated by KBaseReport
           report_ref: report reference generated by KBaseReport) ->
           structure: parameter "result_directory" of String, parameter
           "diff_expression_obj_ref" of type "obj_ref" (An X/Y/Z style
           reference), parameter "report_name" of String, parameter
           "report_ref" of String
        """
        # ctx is the context object
        # return variables are: returnVal
        #BEGIN run_deseq2
        #END run_deseq2

        # At some point might do deeper type checking...
        if not isinstance(returnVal, dict):
            raise ValueError('Method run_deseq2 return value ' +
                             'returnVal is not type dict as required.')
        # return the results
        return [returnVal]
    def status(self, ctx):
        #BEGIN_STATUS
        returnVal = {'state': "OK",
                     'message': "",
                     'version': self.VERSION,
                     'git_url': self.GIT_URL,
                     'git_commit_hash': self.GIT_COMMIT_HASH}
        #END_STATUS
        return [returnVal]
